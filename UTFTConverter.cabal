name:                UTFTConverter
category:            Graphics, Text
version:             0.1.0.0
license:             MIT
cabal-version:       >=1.10
license-file:        LICENSE
author:              Alexander Isenko
maintainer:          Alexander Isenko <alex.isenko@googlemail.com>
homepage:            www.github.com/cirquit/UTFTConverter
bug-reports:         www.github.com/cirquit/UTFTConverter/issues
build-type:          Simple
tested-with:         GHC == 7.8.3
synopsis:            Processing popular picture formats into .c or .raw format in RGB565
description:
  This package was created because I could not find a tool that can be used on UNIX systems to
  parse a picture into an array of RGB565 values and save them to a '.c' or '.raw' file. Both formats
  are used by the UTFT library to display pictures on to a TFT display.
  .
  This package includes, but not limited to, an executable which is made to be as identical as possible
  to the corresponding tool that is also downloaded with the <http://www.rinkydinkelectronics.com/library.php?id=51 UTFT library>.
  .
  The usage is via the command line:
  .
  >./UTFTConverter <filespec> /c|r [/o <path>] [/t AVR|ARM|PIC32]
  >.
  ><filespec>:  File(s) to convert
  >parameters: /c            - Create output as .c array files
  >            /r            - Create output as .raw files
  >            /o <path>     - Set the output directory to <path>
  >            /t <platform> - Select target plaform
  >                            AVR   : Most Arduinos, Bobuion
  >                            ARM   : Arduino Due, Teensy, TI CC3200 LaunchPad
  >                            PIC32 : All chipKit boards
  >.
  >You must specify either /c or /r. All other parameters are optional.
  >If /o is ommited the current directory will be used for output.
  >If /t is ommited the target platform will be set to AVR.'
  .
  Differences to the Windows tool:
  .
    * You can specifiy as many files as you want, not only a directory (mydir/*.jpg still works, the shell does all the work for you)
    * If you specify a target platform while converting to '.raw' the platform will not be printed
    * If you specify a non-existing directory as target, it will be created
    * The length of the array is NOT preceded by '0x'
    * The output for the different platforms is exactly the same, but it's not the one you get if you use the online converter at RinkyDink
    * You can use the flags in any order you want
  .
  .
  The exported library is using <http://hackage.haskell.org/package/JuicyPixels JuicyPixels> to convert incoming
   * '.gif'
   * '.png'
   * '.jpg' / '.jpe' / '.jpeg'
   * '.bmp'
   * '.tga'
  to 'Image PixelRGBA8''s and translates every pixel to a RGB565 format, which is a 4 digit hex number.

  How to install - you have two options:

  Install the Glasgow Haskell Compiler and `cabal` OR the Haskell packaging tool

  For Ubuntu distributions:
   * `sudo apt-get install ghc`
   * download the `cabal-install.tar.gz` from [cabal](http://hackage.haskell.org/package/cabal-install)
   * unpack the `.tar.gz file`, the cabal-install folder should include a `bootstrap.sh`
   * run `./bootstrap.sh`

  For any operation system:
   * Follow the instructions for your operation system on www.haskell.org/platform


  When you have `ghc` and `cabal` or the Haskell Platform installed:

  If you want the library AND the binary (the easier way):
   * run `cabal install UTFTConverter`
   * the executable is now at `~/.cabal/bin/UTFTConverter`

  If you want only the cmd tool:
   * download the JuicyPixels library - `cabal install JuicyPixels`
   * download the git repository - `git clone http://github.com/cirquit/UTFTConverter`
   * run `make` and the binary is in the same directory OR
   * run `cabal install` and the binary is in `/dist/build/` and in your home directory under `~/.cabal/bin/UTFTConverter`, you can also add `~/.cabal/bin` to your `PATH` variable, so you can start it from anywhere

extra-source-files:
  tests
  Makefile
  README.md

source-repository head
  type: git
  location: git://github.com/cirquit/UTFTConverter.git

-- _______________________
--|                       |
--| Library configuration |
--|_______________________|

library
  build-depends:
      base        >=4.7  && <4.8
    , filepath    >=1.3  && <1.4
    , directory   >=1.2  && <1.3
    , time        >=1.4  && <1.5
    , bytestring  >=0.10 && <0.11
    , JuicyPixels >=3.2  && <3.3

  exposed-modules:
      Format.C
    , Format.Converter
    , Format.Raw
    , Format.RGB565

  other-extensions:
      BangPatterns
    , TypeSynonymInstances

  hs-source-dirs:      src
  default-language:    Haskell2010

-- __________________________
--|                          |
--| Executbale configuration |
--|__________________________|

executable UTFTConverter
  build-depends:
    base             >=4.7  && <4.8  ,
    filepath         >=1.3  && <1.4  ,
    directory        >=1.2  && <1.3  ,
    time             >=1.4  && <1.5  ,
    bytestring       >=0.10 && <0.11 ,
    JuicyPixels      >=3.2  && <3.3  ,
    UTFTConverter    ==0.1.*

  other-extensions:
    BangPatterns         ,
    TypeSynonymInstances

  main-is:             Main.hs
  hs-source-dirs:      src
  default-language:    Haskell2010
  ghc-options:         -Wall -O2

-- __________________________
--|                          |
--| Test suite configuration |
--|__________________________|

test-suite lib:
  build-depends:
    base             >=4.7  && <4.8  ,
    filepath         >=1.3  && <1.4  ,
    directory        >=1.2  && <1.3  ,
    time             >=1.4  && <1.5  ,
    bytestring       >=0.10 && <0.11 ,
    JuicyPixels      >=3.2  && <3.3  ,
    hspec            ==2.1.*         ,
    UTFTConverter    ==0.1.*

  other-extensions:
    BangPatterns         ,
    TypeSynonymInstances

  main-is:             Tests.hs
  hs-source-dirs:      tests
  default-language:    Haskell2010
  ghc-options:         -Wall -O2
  type:                exitcode-stdio-1.0
